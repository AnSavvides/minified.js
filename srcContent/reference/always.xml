<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>promise.always() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-always">promise.always()</a></h3>
<div class="summary">Allows you to add a callback that will always be called, no matter whether the operation succeeded or not.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">promise.always(callback)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="always_callback" class=""><a name="always_callback">callback</a></dt>
<dd class="">a function to be called when the operation has been finished, no matter what its result was. The exact arguments depend on the operation and may
vary depending on whether it succeeded or not. If the function returns a Promise, that promise will
be evaluated to determine the state of the returned promise. If provided and it returns regularly, the returned promise will
have success status. If it throws an error, the returned promise will be in the error state.</dd>
<dt id="always_RETURN" class="returnValue inSyntax0"><a name="always_RETURN">return value</a></dt>
<dd class="inSyntax0">a new Promises object. Its state is determined by the callback.</dd>
</dl>

<h4>Description</h4>
<div class="description">Allows you to add a callback that will always be called, no matter whether the operation succeeded or not.
This is a convenience function that will call then() with the same function for both arguments.

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Simple handler for a HTTP request.
<pre>
MINI.request('get', '/weather.html')
    .always(function() {
       alert('Got response or error!');
    });
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
<div id="toc"><a href="dollar.html">MINI()</a>
<a href="add.html">.add()</a>
<a href="addafter.html">.addAfter()</a>
<a href="addbefore.html">.addBefore()</a>
<a href="addfront.html">.addFront()</a>
<a href="animate.html">.animate()</a>
<a href="append.html">.append()</a>
<a href="collect.html">.collect()</a>
<a href="each.html">.each()</a>
<a href="fill.html">.fill()</a>
<a href="filter.html">.filter()</a>
<a href="find.html">.find()</a>
<a href="get.html">.get()</a>
<a href="hasclass.html">.hasClass()</a>
<a href="length.html">.length</a>
<a href="offset.html">.offset()</a>
<a href="on.html">.on()</a>
<a href="prepend.html">.prepend()</a>
<a href="raw.html">.raw</a>
<a href="remove.html">.remove()</a>
<a href="replace.html">.replace()</a>
<a href="set.html">.set()</a>
<a href="sub.html">.sub()</a>
<a href="toggle.html">.toggle()</a>
<a href="values.html">.values()</a>
<a href="dollardollar.html">MINI.$$()</a>
<a href="el.html">MINI.el()</a>
<a href="getcookie.html">MINI.getCookie()</a>
<a href="loop.html">MINI.loop()</a>
<a href="off.html">MINI.off()</a>
<a href="parsejson.html">MINI.parseJSON()</a>
<a href="ready.html">MINI.ready()</a>
<a href="request.html">MINI.request()</a>
<a href="setcookie.html">MINI.setCookie()</a>
<a href="tojson.html">MINI.toJSON()</a>
<a href="always.html">promise.always()</a>
<a href="error.html">promise.error()</a>
<a href="then.html">promise.then()</a>
</div>
]]></main>
</page>
