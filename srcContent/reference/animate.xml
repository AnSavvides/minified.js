<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.animate() - Minified.js</title>
	<section>reference</section>
	<main>
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-animate">.animate()</a></h3>
<div class="summary">Animates the items of the list by modifying their properties, CSS styles and attributes.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">MINI(selector).animate(properties)</div>
<div class="syntax">MINI(selector).animate(properties, durationMs)</div>
<div class="syntax">MINI(selector).animate(properties, durationMs, linearity)</div>
<div class="syntax">MINI(selector).animate(properties, durationMs, linearity)</div>
<div class="syntax">MINI(selector).animate(properties, durationMs, linearity, state)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="animate_properties" class=""><a name="animate_properties">properties</a></dt>
<dd class="">a property map describing the end values of the corresponding properties. The names can use the
set() syntax ('@' prefix for attributes, '$' for styles, '$$fade' for fading and '$$slide' for slide effects).
Values must be either numbers, numbers with units (e.g. "2 px") or colors ('rgb(r,g,b)', '#rrggbb' or '#rgb').
Number values, including those with units, can be prefixed with "+=" or "-=", meaning that the value is relative
to the original value and should be added or subtracted.</dd>
<dt id="animate_durationMs" class=""><a name="animate_durationMs">durationMs</a></dt>
<dd class=""><span class="optional">optional</span> the duration of the animation in milliseconds. Default: 500ms.</dd>
<dt id="animate_linearity" class=""><a name="animate_linearity">linearity</a></dt>
<dd class=""><span class="optional">optional</span> defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0.</dd>
<dt id="animate_delayMs" class=""><a name="animate_delayMs">delayMs</a></dt>
<dd class=""><span class="optional">optional</span> if set, the animation will be delayed by the given time in milliseconds. Default: 0.</dd>
<dt id="animate_state" class=""><a name="animate_state">state</a></dt>
<dd class=""><span class="optional">optional</span> if set, the animation controller will write information about its state in this object. When animate() returns,
there will be a MINI.loop() stop() function in the property state.stop. The property state.time will be continously updated
while the animation is running and contains the number of milliseconds that have
passed from the start until the last invocation of the animation loop, describing the progress of the animation. When the function
has a delay, state.time will return 0 during the delay.
If the animation finished, controller writes null into state.time. state.stop will remain unmodified during the whole time.</dd>
<dt id="animate_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4"><a name="animate_RETURN">return value</a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4">a Promise object for the animation's state. It is fulfilled when the animation ended, and rejected if the animation had been stopped.</dd>
</dl>

<h4>Description</h4>
<div class="description">Animates the items of the list by modifying their properties, CSS styles and attributes. animate() can work with numbers, strings that contain exactly one
number and which may also contain units or other text, and with colors in the CSS notations 'rgb(r,g,b)', '#rrggbb' or '#rgb'.

When you invoke the function, it will first read all old values from the object and extract their numbers and colors. These start values will be compared to
the destination values that have been specified in the given properties. Then animate() will create a background task using MINI.loop() that updates the
specified properties in frequent intervals so that they transition to their destination values.

The start values will be obtained using get(). It is recommended to set the start values using set() before you start the animation, even if this is not
always required.

You can define the kind of transition using the 'linearity' parameter. If you omit it or pass 0, animate's default algorithm will cause a smooth transition
from the start value to the end value. If you pass 1, the transition will be linear, with a sudden start and end of the animation. Any value between 0 and 1
is also allowed and will give you a transition that is 'somewhat smooth'.

If the start value of a property is a string containing a number, animate() will always ignore all the surrounding text and use the destination value as a template
for the value to write. This can cause problems if you mix units in CSS. For example, if the start value is '10%' and you specify an end value of '20px', animate
will do an animation from '10px' to '20px'. It is not able to convert units.

animate() does not only support strings with units, but any string containing exactly one number. This allows you, among other things, with IE-specific CSS properties.
For example, you can transition from a start value 'alpha(opacity = 0)' to 'alpha(opacity = 100)'.

When you animate colors, animate() is able to convert between the three notations rgb(r,g,b), #rrggbb or #rgb. You can use them interchangeably, but you can not
use color names such as 'red'.

You can prefix any number, including numbers with units, with "-=" or "+=" in order to specify a value relative to the starting value. The new value will be added
to or substracted from the start value to determine the end value.

To allow more complex animation, animate() allows you to add a callback which will be called when the animation has finished. You can also specify a delay
to create timelines.

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Move an element. Note that you need to set the initial value for styles, unless they have been explicitly set
for the HTML element using the style attribute before or you set it earlier with an earlier set() or animate() invocation.
<pre>
$('#myMovingDiv').set({$left: '0px', $top: '0px'})                // start values
                 .animate({$left: '50px', $top: '100px'}, 1000);  // animation
</pre>
</div>
<h4>Example</h4>
<div class="example">Using relative values for animation:
<pre>
$('#myMovingDiv').set({$left: '100px', $top: '100px'})                // start values
                 .animate({$left: '-=50px', $top: '+=100px'}, 1000);  // animation
</pre>
</div>
<h4>Example</h4>
<div class="example">Change the color of an element:
<pre>
$('#myBlushingDiv').set({$backgroundColor: '#000000'})
                   .animate({$backgroundColor: '#ff0000'}, 1000);
</pre>
</div>
<h4>Example</h4>
<div class="example">Fade-out effect:
<pre>
$('#myFadingDiv').animate({$$fade: 0}, 1000);
</pre>
</div>
<h4>Example</h4>
<div class="example">Slide-in effect:
<pre>
$('#myInvisibleDiv').animate({$$slide: 1}, 1000);
</pre>
</div>
<h4>Example</h4>
<div class="example">Chained animation using promise callbacks. The element is first moved to the position 200/0, then to 200/200, and finally to 100/100.
<pre>
var div = $('#myMovingDiv').set({$left: '0px', $top: '0px'});
div.animate({$left: '200px', $top: '0px'}, 600, 0)
   .then(function() {
          div.animate({$left: '200px', $top: '200px'}, 800, 0);
   }).then(function() {
          div.animate({$left: '100px', $top: '100px'}, 400);
   });
});
</pre>
</div>
<h4>Example</h4>
<div class="example">Does same as the previous example, but implemented using delays:
<pre>
var div = $('#myMovingDiv').set({$left: '0px', $top: '0px'});
div.animate({$left: '200px', $top: '0px'}, 600)
div.animate({$left: '200px', $top: '200px'}, 800, 0, null, 600)
div.animate({$left: '100px', $top: '100px'}, 400), 0, null, 600+800);
</pre>
</div>
<h4>Example</h4>
<div class="example">Three block race to the position 500px with delayed start:
<pre>
$('#racingDiv1').set({$left: '0px'}).animate({$left: '500px'}, 750, 0, null, 250); // waits 250ms, then needs 750ms
$('#racingDiv2').set({$left: '0px'}).animate({$left: '500px'}, 900, 1);            // starts immediately, linear motion, then needs 900ms
$('#racingDiv3').set({$left: '0px'}).animate({$left: '500px'}, 500, 0, null, 300); // waits 200ms, then needs 500ms
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
<div id="toc"><a href="dollar.html">MINI()</a>
<a href="add.html">.add()</a>
<a href="addafter.html">.addAfter()</a>
<a href="addbefore.html">.addBefore()</a>
<a href="addfront.html">.addFront()</a>
<a href="animate.html">.animate()</a>
<a href="append.html">.append()</a>
<a href="collect.html">.collect()</a>
<a href="each.html">.each()</a>
<a href="fill.html">.fill()</a>
<a href="filter.html">.filter()</a>
<a href="find.html">.find()</a>
<a href="get.html">.get()</a>
<a href="hasclass.html">.hasClass()</a>
<a href="length.html">.length</a>
<a href="offset.html">.offset()</a>
<a href="on.html">.on()</a>
<a href="prepend.html">.prepend()</a>
<a href="raw.html">.raw</a>
<a href="remove.html">.remove()</a>
<a href="replace.html">.replace()</a>
<a href="set.html">.set()</a>
<a href="sub.html">.sub()</a>
<a href="toggle.html">.toggle()</a>
<a href="values.html">.values()</a>
<a href="dollardollar.html">MINI.$$()</a>
<a href="el.html">MINI.el()</a>
<a href="getcookie.html">MINI.getCookie()</a>
<a href="loop.html">MINI.loop()</a>
<a href="off.html">MINI.off()</a>
<a href="parsejson.html">MINI.parseJSON()</a>
<a href="ready.html">MINI.ready()</a>
<a href="request.html">MINI.request()</a>
<a href="setcookie.html">MINI.setCookie()</a>
<a href="tojson.html">MINI.toJSON()</a>
<a href="always.html">promise.always()</a>
<a href="onerror.html">promise.onError()</a>
<a href="then.html">promise.then()</a>
</div>	</main>
</page>
