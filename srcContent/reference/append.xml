<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.append() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-append">.append()</a></h2>
<div class="summary">Appends strings to properties or attributes of list items.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">$(selector).append(name, value)</div>
<div class="syntax">$(selector).append(properties)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="append_name" class=""><a name="append_name"><var>name</var></a></dt>
<dd class="">the name of a single property or attribute to modify. If prefixed with '@', it is treated as a DOM element's attribute.
A dollar ('$') is used to select a CSS style. Also supports all other names schemas of <code><a href='set.html'>set()</a></code>.</dd>
<dt id="append_value" class=""><a name="append_value"><var>value</var></a></dt>
<dd class="">the value to append. It will be converted to a string before appending it.</dd>
<dt id="append_properties" class=""><a name="append_properties"><var>properties</var></a></dt>
<dd class="">a map containing names as keys and the values to append as map values. See above for the syntax.</dd>
<dt id="append_RETURN" class="returnValue inSyntax0 inSyntax1"><a name="append_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1">the list</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Appends strings to properties or attributes of list items. <var>append()</var> works mostly like <code><a href='set.html'>set()</a></code> and supports the same syntax for property names, but instead of
overwriting the old values, it reads the old value, converts it to a string and then appends the given value.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Add a link after each h2 headline:
<pre>
$('h2').append('outerHTML', '<a href="#toc">Table of Content</a>');
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="append.html">.append()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="hasclass.html">.hasClass()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="prepend.html">.prepend()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promise.html">Promise</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li></ul></div>

]]></main>
</page>
