<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.clone() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-clone">.clone()</a></h2>
<div class="summary">Creates a Minified list list of strings and Element Factories that returns clones of the list elements.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">$(selector).clone()</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="clone_RETURN" class="returnValue inSyntax0"><a name="clone_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0">the list of Element Factory functions and strings to create clones</dd>
</dl>

<h4>Description</h4>
<div class="description">Creates a Minified list list of strings and Element Factories that returns clones of the list elements. An Element Factory is a function
that does not take arguments and returns a Minified list of DOM nodes. You can pass the list to <code><a href='add.html'>add()</a></code> and similar functions
to re-create the cloned nodes.

If you call <var>clone()</var> on a list with several items, the ElementFactory will return all of them in its list.

<var>clone()</var> is very limited in what it will clone. Only elements, their attributes, text nodes and CDATA will be cloned.
Modifications of the elements, such as event handlers, will not be cloned.

Please note that id attributes will be automatically skipped by the Element Factory. This allows you to address the element to clone by id
without having to worry about duplicate ids in the result.

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Using the following HTML:
<pre>
&lt;div id="comments">
   &lt;div class="comment">My comment.&lt;/div>
&lt;/div>
</pre>
Creating a clone factory:
<pre>
var myCloneFactory = $('.comment').clone();
</pre>
Cloning a comment and adding it below the existing one:
<pre>
$('#comments').add($('.comment').clone());
</pre>
</div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="append.html">.append()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="hasclass.html">.hasClass()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="prepend.html">.prepend()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li></ul></div>

]]></main>
</page>
