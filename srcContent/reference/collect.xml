<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.collect() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-collect">.collect()</a></h3>
<div class="summary">Creates a new list from the current list using given callback function.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">collect(collectFunc)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="collect_collectFunc" class=""><a name="collect_collectFunc">collectFunc</a></dt>
<dd class="">the callback function(item, index) to invoke for each item with the item as first argument and the
0-based index as second argument.
If the function returns a list, its elements will be added to the result list. Other objects will also be added. Nulls
will be ignored and not added.</dd>
<dt id="collect_RETURN" class="returnValue inSyntax0"><a name="collect_RETURN">return value</a></dt>
<dd class="inSyntax0">the new list</dd>
</dl>

<h4>Description</h4>
<div class="description">Creates a new list from the current list using given callback function.
The callback is invoked once for each element of the current
list. The callback results will be added to the result list.
The callback can return
<ul>
<li>An array or another list-like object whose elements will be appended to the result array as single elements.</li>
<li>A regular object which will be appended to the list</li>
<li>null (or undefined), which means that no object will be added to the list.
If you need to add null or modified to the result list, put it into a single-element array.</li>
</ul>

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Goes through input elements. If they are text inputs, their value will be added to the list:
<pre>
var texts = $('input').collect(function(input) {
if (input.getAttribute('type') != null || input.getAttribute('type') == 'text') // text is default, so check for null
    return input.value;
else
    return null; // ignore
});
</pre>
</div>
<h4>Example</h4>
<div class="example">Creates a list of all children of the selected list.
<pre>
var childList = $('.mySections').collect(function(node) {
return node.childNodes; // adds a while list of nodes
});
</pre>
</div>
<h4>Example</h4>
<div class="example">Goes through selected input elements. For each hit, the innerHTML is added twice, once in lower case and once in upper case:
<pre>
var elements = $('input.myTexts').collect(function(item) {
    return [item.innerHTML.toLowerCase(), item.innerHTML.toUpperCase()];
});
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
<div id="toc"><a href="dollar.html">MINI()</a>
<a href="add.html">.add()</a>
<a href="addafter.html">.addAfter()</a>
<a href="addbefore.html">.addBefore()</a>
<a href="addfront.html">.addFront()</a>
<a href="animate.html">.animate()</a>
<a href="append.html">.append()</a>
<a href="clone.html">.clone()</a>
<a href="collect.html">.collect()</a>
<a href="each.html">.each()</a>
<a href="fill.html">.fill()</a>
<a href="filter.html">.filter()</a>
<a href="find.html">.find()</a>
<a href="get.html">.get()</a>
<a href="hasclass.html">.hasClass()</a>
<a href="length.html">.length</a>
<a href="offset.html">.offset()</a>
<a href="on.html">.on()</a>
<a href="prepend.html">.prepend()</a>
<a href="remove.html">.remove()</a>
<a href="replace.html">.replace()</a>
<a href="set.html">.set()</a>
<a href="sub.html">.sub()</a>
<a href="toggle.html">.toggle()</a>
<a href="dollardollar.html">MINI.$$()</a>
<a href="el.html">MINI.el()</a>
<a href="getcookie.html">MINI.getCookie()</a>
<a href="loop.html">MINI.loop()</a>
<a href="off.html">MINI.off()</a>
<a href="parsejson.html">MINI.parseJSON()</a>
<a href="ready.html">MINI.ready()</a>
<a href="request.html">MINI.request()</a>
<a href="setcookie.html">MINI.setCookie()</a>
<a href="tojson.html">MINI.toJSON()</a>
<a href="always.html">promise.always()</a>
<a href="error.html">promise.error()</a>
<a href="then.html">promise.then()</a>
</div>
]]></main>
</page>
