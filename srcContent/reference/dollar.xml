<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>$() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-dollar">$()</a></h2>
<div class="summary">Uses a CSS-like selector to create an list containing all elements that fulfill the filter conditions.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">$(selector)</div>
<div class="syntax">$(selector, context)</div>
<div class="syntax">$(selector, context, childOnly)</div>
<div class="syntax">$(function)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="dollar_selector" class=""><a name="dollar_selector"><var>selector</var></a></dt>
<dd class="">a simple, CSS-like selector for the elements. It supports '#id' (lookup by id), '.class' (lookup by class),
'element' (lookup by elements) and 'element.class' (combined class and element). Use commas to combine several selectors.
You can also separate two (or more) selectors by space to find elements which are descendants of the previous selectors.
For example, use 'div' to find all div elements, '.header' to find all elements containing a class name called 'header', and
'a.popup' for all a elements with the class 'popup'. To find all elements with 'header' or 'footer' class names,
write '.header, .footer'. To find all divs elements below the element with the id 'main', use '#main div'.
The string "*" will return all elements.
You can also use a DOM node as selector, it will be returned as a single-element list.
If you pass a list, a shallow copy of the list will be returned. Nulls will be automatically removed from the copy. Nested lists will be flattened
so the result only contains elements.
If you pass a function, it will be registered using <code><a href='ready.html'>$.ready()</a></code>.</dd>
<dt id="dollar_context" class=""><a name="dollar_context"><var>context</var></a></dt>
<dd class=""><span class="optional">optional</span> an optional selector, DOM node or list of DOM nodes which specifies one or more common ancestor nodes for the selection.
The returned list contains only descendants of the context nodes, all others will be filtered out.</dd>
<dt id="dollar_childOnly" class=""><a name="dollar_childOnly"><var>childOnly</var></a></dt>
<dd class=""><span class="optional">optional</span> if set, only direct children of the context nodes are included in the list. If omitted or not true, all descendants of the
context will be included.</dd>
<dt id="dollar_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3"><a name="dollar_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3">the array-like object containing the content specified by the selector. The returned object is guaranteed to
have a property 'length', specifying the number of elements, and allows you to access elements with numbered properties, as in
regular arrays (e.g. list[2] for the second elements). Other Array functions are not guaranteed to be available, but you can use the filter()
function to get a list that is guaranteed to extend Array.
Please note that duplicates (e.g. created using the comma-syntax or several context nodes) will not be removed. If the selector was a list,
the existing order will be kept. If the selector was a simple selector, the elements are in document order. If you combined several selectors
using commas, only the individual results of the selectors will keep the document order, but will then be joined to a single list. This list will,
as a whole, not be in document order anymore. The array returned has several convenience functions listed below:</dd>
</dl>

<h4>Description</h4>
<div class="description">Uses a CSS-like selector to create an list containing all elements that fulfill the filter conditions.
This is the most central function in Minified. The returned
list has a number of functions to work with the list elements.

As a special shortcut, if you pass a function to <var>$()</var>, it will be registered using <code><a href='ready.html'>$.ready()</a></code> to be executed
when the DOM model is complete.

The usual name of this function is <var>$()</var>, but you can assign it to any other variable in using require().

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">A simple selector to find an element by id.
<pre>
var l1 = $('#myElementId');
</pre>
</div>
<h4>Example</h4>
<div class="example">You can also pass a reference to an DOM node to the function to receive a list containing only this node:
<pre>
var l2 = $(document.getElementById('myElementId'));
</pre>
</div>
<h4>Example</h4>
<div class="example">Lists will be copied:
<pre>
var l2 = $([elementA, elementB, elementC]);
</pre>
</div>
<h4>Example</h4>
<div class="example">A simple selector to find all elements with the given class.
<pre>
var l3 = $('.myClass');
</pre>
</div>
<h4>Example</h4>
<div class="example">A selector to find all elements with the given name.
<pre>
var l4 = $('input'); // finds all input elements
</pre>
</div>
<h4>Example</h4>
<div class="example">A selector to find all elements with the given name and class.
<pre>
var l5 = $('input.myRadio'); // finds all input elements wit
</pre>
</div>
<h4>Example</h4>
<div class="example">A selector to find all elements that are descendants of the given element.
<pre>
var l6 = $('#myForm input'); // finds all input elements that are in the element with the id myForm
</pre>
</div>
<h4>Example</h4>
<div class="example">A selector to find all elements with one of the given classes:
<pre>
var l7 = $('.a, .b'); // finds all elements that have either the class a or class b
</pre>
</div>
<h4>Example</h4>
<div class="example">A selector that finds all elements that are descendants of the element myDivision, are inside a .myForm class and are input elements:
<pre>
var l8 = $('#myDivision .myForm input');
</pre>
</div>
<h4>Example</h4>
<div class="example">Using contexts to make it easier to specify ancestors:
<pre>
var l9 = $('.myRadio', '#formA, #formB, #formC');  // same as $('#formA .myRadio, #formB .myRadio, #formC .myRadio')
</pre>
</div>
<h4>Example</h4>
<div class="example">Using one of the list functions, set(), on the list, and set the element's text color. '$' at the beginning of the property name is short for 'style.' and thus
              sets a CSS value.
<pre>
$('#myElementId').set('$color', 'red');
</pre>
</div>
<h4>Example</h4>
<div class="example">Most functions return the list you invoked them on, allowing you to chain them:
<pre>
$('#myForm .myRadio').addClass('uncheckedRadio')
                              .set('checked', true)
                              .on('click', function() {
                                    $(this).set({@: 'uncheckedRadio');
                               });
</pre>
</div>
<h4>Example</h4>
<div class="example">Using $() as a $.ready() shortcut:
<pre>
$(function() {
  // work with the DOM tree
});
</pre>
</div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="append.html">.append()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="hasclass.html">.hasClass()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="prepend.html">.prepend()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li></ul></div>

]]></main>
</page>
