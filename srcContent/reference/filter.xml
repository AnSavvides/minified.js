<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.filter() - Minified.js</title>
	<section>reference</section>
	<main>
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-filter">.filter()</a></h3>
<div class="summary">Creates a new list that contains only those items approved by the given function.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">filter(filterFunc)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="filter_filterFunc" class=""><a name="filter_filterFunc">filterFunc</a></dt>
<dd class=""><span class="optional">optional</span> the callback function(item, index) to invoke for each item with the item as first argument and the 0-based index as second argument.
If the function returns false for an item, it is not included in the resulting list. If you omit the callback (or use null), filter() returns a new Array-based list that is a shallow copy
of the original.</dd>
<dt id="filter_RETURN" class="returnValue inSyntax0"><a name="filter_RETURN">return value</a></dt>
<dd class="inSyntax0">the new list, always guaranteed to be based on Array and always a new instance</dd>
</dl>

<h4>Description</h4>
<div class="description">Creates a new list that contains only those items approved by the given function. The function is called once for each item.
If it returns true, the item is in the returned list, otherwise it will be removed.
This function also guarantees that the returned list is always based on an Array and thus its raw property has access to all
Array functions.

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Creates a list of all unchecked checkboxes.
<pre>
var list = $('input').filter(function(item) {
    return item.getAttribute('type') == 'checkbox' &amp;&amp; item.checked;
});
</pre>
</div>
<h4>Example</h4>
<div class="example">Converts a list to an Array-based list and uses the function Array.slice() to select only the second and third elements. Note that the Array returned by slice()
              is a new Array object and does not contain addClass(), so the new Array must be converted to a MINI list using $() first.
<pre>
$($('.myElement').filter().raw.slice(1, 3)).addClass('secondOrThird');
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
<div id="toc"><a href="dollar.html">MINI()</a>
<a href="add.html">.add()</a>
<a href="addafter.html">.addAfter()</a>
<a href="addbefore.html">.addBefore()</a>
<a href="addfront.html">.addFront()</a>
<a href="animate.html">.animate()</a>
<a href="append.html">.append()</a>
<a href="collect.html">.collect()</a>
<a href="each.html">.each()</a>
<a href="fill.html">.fill()</a>
<a href="filter.html">.filter()</a>
<a href="find.html">.find()</a>
<a href="get.html">.get()</a>
<a href="hasclass.html">.hasClass()</a>
<a href="length.html">.length</a>
<a href="offset.html">.offset()</a>
<a href="on.html">.on()</a>
<a href="prepend.html">.prepend()</a>
<a href="raw.html">.raw</a>
<a href="remove.html">.remove()</a>
<a href="replace.html">.replace()</a>
<a href="set.html">.set()</a>
<a href="sub.html">.sub()</a>
<a href="toggle.html">.toggle()</a>
<a href="values.html">.values()</a>
<a href="dollardollar.html">MINI.$$()</a>
<a href="el.html">MINI.el()</a>
<a href="getcookie.html">MINI.getCookie()</a>
<a href="loop.html">MINI.loop()</a>
<a href="off.html">MINI.off()</a>
<a href="parsejson.html">MINI.parseJSON()</a>
<a href="ready.html">MINI.ready()</a>
<a href="request.html">MINI.request()</a>
<a href="setcookie.html">MINI.setCookie()</a>
<a href="tojson.html">MINI.toJSON()</a>
<a href="always.html">promise.always()</a>
<a href="onerror.html">promise.onError()</a>
<a href="then.html">promise.then()</a>
</div>	</main>
</page>
