<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>Reference - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<h3><a href="dollar.html">$()</a></h3>
<div class="summary">Uses a CSS-like selector to create an list containing all elements that fulfill the filter conditions.</div>

<h3><a href="dollardollar.html">$$()</a></h3>
<div class="summary">Returns an DOM object containing the first match of the given selector, or undefined if no match.</div>

<h3><a href="getcookie.html">$.getCookie()</a></h3>
<div class="summary">Tries to find the cookie with the given name and returns it.</div>

<h3><a href="loop.html">$.loop()</a></h3>
<div class="summary">Runs an animation loop.</div>

<h3><a href="off.html">$.off()</a></h3>
<div class="summary">Removes the event handler.</div>

<h3><a href="parsejson.html">$.parseJSON()</a></h3>
<div class="summary">Parses a string containing JSON and returns the de-serialized object.</div>

<h3><a href="ready.html">$.ready()</a></h3>
<div class="summary">Registers a handler to be called as soon as the HTML has been fully loaded (but not necessarily images and other elements).</div>

<h3><a href="request.html">$.request()</a></h3>
<div class="summary">Initiates a HTTP request (using XmlHTTPRequest) to the given URL.</div>

<h3><a href="setcookie.html">$.setCookie()</a></h3>
<div class="summary">Creates, updates or deletes a cookie.</div>

<h3><a href="tojson.html">$.toJSON()</a></h3>
<div class="summary">Converts the given value into a JSON string.</div>

<h3><a href="add.html">.add()</a></h3>
<div class="summary">Adds the given node(s) as content to the list elements as additional nodes.</div>

<h3><a href="addafter.html">.addAfter()</a></h3>
<div class="summary">Inserts the given text or element(s) as sibling after each element of this list.</div>

<h3><a href="addbefore.html">.addBefore()</a></h3>
<div class="summary">Inserts the given text or element(s) as sibling in front of each element of this list.</div>

<h3><a href="addfront.html">.addFront()</a></h3>
<div class="summary">Adds the given node(s) as content to the list elements as additional nodes.</div>

<h3><a href="animate.html">.animate()</a></h3>
<div class="summary">Animates the items of the list by modifying their properties, CSS styles and attributes.</div>

<h3><a href="append.html">.append()</a></h3>
<div class="summary">Appends strings to properties or attributes of list items.</div>

<h3><a href="clone.html">.clone()</a></h3>
<div class="summary">Creates a Minified list list of strings and Element Factories that returns clones of the list elements.</div>

<h3><a href="collect.html">.collect()</a></h3>
<div class="summary">Creates a new list from the current list using given callback function.</div>

<h3><a href="each.html">.each()</a></h3>
<div class="summary">Invokes the given function once for each item in the list.</div>

<h3><a href="fill.html">.fill()</a></h3>
<div class="summary">Sets the content of the list elements, replacing old content.</div>

<h3><a href="filter.html">.filter()</a></h3>
<div class="summary">Creates a new list that contains only those items approved by the given function.</div>

<h3><a href="find.html">.find()</a></h3>
<div class="summary">Find a specific value in the list.</div>

<h3><a href="get.html">.get()</a></h3>
<div class="summary">Retrieves properties, attributes and styles from the list's first element.</div>

<h3><a href="hasclass.html">.hasClass()</a></h3>
<div class="summary">Checks whether at least one element in the list has the given class name.</div>

<h3><a href="length.html">.length</a></h3>
<div class="summary">Contains the number of elements in the list.</div>

<h3><a href="offset.html">.offset()</a></h3>
<div class="summary">Returns the pixel page coordinates of the list's first element.</div>

<h3><a href="on.html">.on()</a></h3>
<div class="summary">Registers the function as event handler for all items in the list.</div>

<h3><a href="prepend.html">.prepend()</a></h3>
<div class="summary">Prepends strings to properties or attributes of list items.</div>

<h3><a href="remove.html">.remove()</a></h3>
<div class="summary">Removes all nodes of the list from the DOM tree.</div>

<h3><a href="replace.html">.replace()</a></h3>
<div class="summary">Replaces the list items with the the given node(s) in the DOM tree.</div>

<h3><a href="set.html">.set()</a></h3>
<div class="summary">Modifies the list's DOM elements by setting their properties, attributes, CSS style and/or CSS classes.</div>

<h3><a href="sub.html">.sub()</a></h3>
<div class="summary">Returns a new list containing only the elements in the specified range.</div>

<h3><a href="toggle.html">.toggle()</a></h3>
<div class="summary">
Creates a function that switches between the two given states for the list.</div>

<h3><a href="ee.html">EE()</a></h3>
<div class="summary">Creates a new Element Factory.</div>

<h3><a href="always.html">promise.always()</a></h3>
<div class="summary">Registers a callback that will always be called when the promise's operation ended, no matter whether the operation succeeded or not.</div>

<h3><a href="error.html">promise.error()</a></h3>
<div class="summary">Registers a callback that will be called when the operation failed.</div>

<h3><a href="then.html">promise.then()</a></h3>
<div class="summary">Registers two callbacks that will be invoked when the promise's asynchronous operation finished
successfully (<var>onSuccess</var>) or an error occurred (<var>onError</var>).</div>


]]></main>
</page>
