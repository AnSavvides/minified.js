<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.set() - Minified.js</title>
	<section>reference</section>
	<main>
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-set">.set()</a></h3>
<div class="summary">Modifies the list's DOM elements or objects by setting their properties, attributes, CSS style and/or CSS classes.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">MINI(selector).set(name, value)</div>
<div class="syntax">MINI(selector).set(properties)</div>
<div class="syntax">MINI(selector).set(cssClasses)</div>
<div class="syntax">MINI(selector).set(name, value, defaultFunction)</div>
<div class="syntax">MINI(selector).set(properties, undefined, defaultFunction)</div>
<div class="syntax">MINI(selector).set(properties, undefined, defaultFunction, defaultPrefix)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="set_name"><a name="set_name">name</a></dt>
<dd>the name of a single property or attribute to modify. If prefixed with '@', it is treated as a DOM element's attribute.
A dollar ('$') prefix is a shortcut for CSS styles. A simple dollar ('$') as name modifies CSS classes.
The special name '$$fade' expects a value between 0 and 1 and sets the opacity of the element in a browser-independent way.
The special name '$$slide' expects a value between 0 and 1 that defines how much of the element is visible. The rest will
be cut up at its buttom. It can be used in animations to slide in or out an element.
Both '$$fade' and '$$slide' will automatically control the element's 'visibility' and 'display' styles. If the value is 0,
the element's visibility will automatically be set to 'hidden'. If the value is larger, the visibility will be set to
'visible' and the display style to 'block'. Both special names only work with block elements.
In order to stay compatible with Internet Explorer 7 and earlier, you should not set the attributes '@class' and '@style'. Instead
use the '$' syntax.
</dd>
<dt id="set_value"><a name="set_value">value</a></dt>
<dd>the value to set. If it is a function, the function(oldValue, index, obj) will be invoked for each list element to evaluate the value.
The function is called with with the old value as first argument and the index in the list as second.
The third value is the object being modified. Functions are not possible for virtual properties ('$$fade' and '$$slide'). For the CSS style names,
the old value given to the function is the old value of the className property containing the existing classes.
If value is null and name specified an attribute, the value will be ignored.
If a dollar ('$') has been passed as name, the value can contain space-separated CSS class names. If prefix with a '+' the class will be added,
with a '+' prefix the class will be removed. Without prefix, the class will be toggled. Functions are not supported by '$'.</dd>
<dt id="set_properties"><a name="set_properties">properties</a></dt>
<dd>a map containing names as keys and the values to set as map values. See above for the syntax.</dd>
<dt id="set_cssClasses"><a name="set_cssClasses">cssClasses</a></dt>
<dd>if set() is invoked with a string as single argument, the name "$" (CSS classes) is taken by default and the argument is the
value. See value above for CSS syntax.</dd>
<dt id="set_defaultFunction"><a name="set_defaultFunction">defaultFunction</a></dt>
<dd><span class="optional">optional</span> if set and no function is provided as value, this function will be invoked for each list element
and property to determine the value. The function is called with with the old value as first
argument and the index in the list as second. The third value is the new value specified
in the set() call.</dd>
<dt id="set_RETURN" class="returnValue"><a name="set_RETURN">return value</a></dt>
<dd>the list</dd>
</dl>

<h4>Description</h4>
<div class="description">Modifies the list's DOM elements or objects by setting their properties, attributes, CSS style and/or CSS classes. You can either supply a
single name and value to set only one property, or you can provide a map of properties to set.
More complex operations can be accomplished by supplying a function as value. It will then be called for each element that will
be set.

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Unchecking checkboxes:
<pre>
$('input.checkbox').set('checked', false);
</pre>
</div>
<h4>Example</h4>
<div class="example">Changing the text of the next sibling:
<pre>
$('input.checkbox').set('nextSibling.innerHTML', 'New Text');
</pre>
</div>
<h4>Example</h4>
<div class="example">Changing attributes:
<pre>
$('a.someLinks').set('@href', 'http://www.example.com/');
</pre>
</div>
<h4>Example</h4>
<div class="example">Changing styles:
<pre>
$('.bigText').set('$font-size', 'x-large');
</pre>
</div>
<h4>Example</h4>
<div class="example">Adding and removing CSS classes:
<pre>
$('.myElem').set('$', '+myClass -otherClass');
</pre>
</div>
<h4>Example</h4>
<div class="example">Toggling a CSS class:
<pre>
$('.myElem').set('$', 'on');
</pre>
</div>
<h4>Example</h4>
<div class="example">Shortcut for CSS manipulation (omit the name - $ is the default name):
<pre>
$('.myElem').set('+myClass -otherClass on');
</pre>
</div>
<h4>Example</h4>
<div class="example">Making an element transparent:
<pre>
$('.seeThrough').set('$$fade', 0.5);
</pre>
</div>
<h4>Example</h4>
<div class="example">Making an element visible. Note that $$fade will set the element's display style to 'block' and visibility style to 'visible'.
<pre>
$('.myElem').set('$$fade', 1);
</pre>
</div>
<h4>Example</h4>
<div class="example">Using a map to change several properties:
<pre>
$('input.checkbox').set({checked: false,
                         'nextSibling.innerHTML': 'New Text',
                         'parentNode.@title': 'Check this'});
</pre>
</div>
<h4>Example</h4>
<div class="example">Changing CSS with a map:
<pre>
$('.importantText').set({$fontSize: 'x-large',
                         $color: 'black',
                         $backgroundColor: 'red',
                         $: '+selected -default'});
</pre>
</div>
<h4>Example</h4>
<div class="example">You can specify a function as value to modify a value instead of just setting it:
<pre>
$('h2').set('innerHTML', function(oldValue, index) {
		return 'Chapter ' + index + ': ' + oldValue.toUpperCase();
});
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
	</main>
</page>
