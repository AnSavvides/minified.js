<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>MINI.setCookie() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-setcookie">MINI.setCookie()</a></h3>
<div class="summary">Creates, updates or deletes a cookie.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">MINI.setCookie(name, value)</div>
<div class="syntax">MINI.setCookie(name, value, dateOrDays)</div>
<div class="syntax">MINI.setCookie(name, value, dateOrDays, path)</div>
<div class="syntax">MINI.setCookie(name, value, dateOrDays, path, domain)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="setcookie_name" class=""><a name="setcookie_name">name</a></dt>
<dd class="">the name of the cookie. This should be ideally an alphanumeric name, as it will not be escaped by Minified and this
guarantees compatibility with all systems.
If it contains a '=', it is guaranteed not to work, because it breaks the cookie syntax.</dd>
<dt id="setcookie_value" class=""><a name="setcookie_value">value</a></dt>
<dd class="">the value of the cookie. All characters except alphanumeric and "*@-_+./" will be escaped using the
JavaScript escape() function and thus can be used, unless you set the optional dontEscape parameter.</dd>
<dt id="setcookie_dateOrDays" class=""><a name="setcookie_dateOrDays">dateOrDays</a></dt>
<dd class=""><span class="optional">optional</span> specifies when the cookie expires. Can be either a Date object or a number that specifies the
amount of days. If not set, the cookie has a session lifetime, which means it will be deleted as soon as the
browser has been closes. If the number negative or the date in the past, the cookie will be deleted.</dd>
<dt id="setcookie_path" class=""><a name="setcookie_path">path</a></dt>
<dd class=""><span class="optional">optional</span> if set, the cookie will be restricted to documents in the given certain path. Otherwise it is valid
for the whole domain. This is rarely needed.</dd>
<dt id="setcookie_domain" class=""><a name="setcookie_domain">domain</a></dt>
<dd class=""><span class="optional">optional</span> if set, you use it to specify the domain (e.g. example.com) which can read the cookie. If you don't set it,
the domain which hosts the current document is used. This parameter is rarely used, because there are only very
few use cases in which this makes sense.</dd>
<dt id="setcookie_dontEscape" class=""><a name="setcookie_dontEscape">dontEscape</a></dt>
<dd class=""><span class="optional">optional</span> if set, the cookie value is not escaped. Note that without escaping you can not use every possible
character (e.g. ";" will break the cookie), but it may be needed for interoperability with systems that need
some non-alphanumeric characters unescaped or use a different escaping algorithm.</dd>
</dl>

<h4>Description</h4>
<div class="description">Creates, updates or deletes a cookie. If there is an an existing cookie
of the same name, will be overwritten with the new value and settings. Use a

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Reads the existing cookie 'numberOfVisits', increases the number and stores it:
<pre>
var visits = MINI.getCookie('numberOfVisits');
MINI.setCookie('numberOfVisits',
                     visits ? (parseInt(visits) + 1) : 1,         // if cookie not set, start with 1
                     365);                                              // store for 365 days
</pre>
</div>
<h4>Example</h4>
<div class="example">Deletes the cookie "numberOfVisits":
<pre>
MINI.setCookie('numberOfVisits', '', -1);
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
<div id="toc"><a href="dollar.html">MINI()</a>
<a href="add.html">.add()</a>
<a href="addafter.html">.addAfter()</a>
<a href="addbefore.html">.addBefore()</a>
<a href="addfront.html">.addFront()</a>
<a href="animate.html">.animate()</a>
<a href="append.html">.append()</a>
<a href="collect.html">.collect()</a>
<a href="each.html">.each()</a>
<a href="fill.html">.fill()</a>
<a href="filter.html">.filter()</a>
<a href="find.html">.find()</a>
<a href="get.html">.get()</a>
<a href="hasclass.html">.hasClass()</a>
<a href="length.html">.length</a>
<a href="offset.html">.offset()</a>
<a href="on.html">.on()</a>
<a href="prepend.html">.prepend()</a>
<a href="raw.html">.raw</a>
<a href="remove.html">.remove()</a>
<a href="replace.html">.replace()</a>
<a href="set.html">.set()</a>
<a href="sub.html">.sub()</a>
<a href="toggle.html">.toggle()</a>
<a href="values.html">.values()</a>
<a href="dollardollar.html">MINI.$$()</a>
<a href="el.html">MINI.el()</a>
<a href="getcookie.html">MINI.getCookie()</a>
<a href="loop.html">MINI.loop()</a>
<a href="off.html">MINI.off()</a>
<a href="parsejson.html">MINI.parseJSON()</a>
<a href="ready.html">MINI.ready()</a>
<a href="request.html">MINI.request()</a>
<a href="setcookie.html">MINI.setCookie()</a>
<a href="tojson.html">MINI.toJSON()</a>
<a href="always.html">promise.always()</a>
<a href="error.html">promise.error()</a>
<a href="then.html">promise.then()</a>
</div>
]]></main>
</page>
