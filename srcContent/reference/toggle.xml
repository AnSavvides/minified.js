<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.toggle() - Minified.js</title>
	<section>reference</section>
	<main>
<p><a href="index.html">back to Overview</a></p>
<h3><a name="doc-toggle">.toggle()</a></h3>
<div class="summary">
Creates a function that switches between the two given states for the list.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">MINI(selector).toggle(cssClasses)</div>
<div class="syntax">MINI(selector).toggle(state1, state2)</div>
<div class="syntax">MINI(selector).toggle(state1, state2, durationMs)</div>
<div class="syntax">MINI(selector).toggle(state1, state2, durationMs, linearity)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="toggle_cssClasses" class=""><a name="toggle_cssClasses">cssClasses</a></dt>
<dd class="">a string containing space-separated CSS class names that will be toggled. Classes are disabled in the first state
and enabled in the second.</dd>
<dt id="toggle_state1" class=""><a name="toggle_state1">state1</a></dt>
<dd class="">a property map describing the initial state of the properties. The properties will automatically be set when the
toggle() function is created. The property names use the set() syntax ('@' prefix for attributes, '$' for styles).
For animation, values must be either numbers, numbers with
units (e.g. "2 px") or colors ('rgb(r,g,b)', '#rrggbb' or '#rgb'). The properties will be set
for all elements of the list.</dd>
<dt id="toggle_state2" class=""><a name="toggle_state2">state2</a></dt>
<dd class="">a property map describing the second state of the properties. Uses set() syntax, like the other state.</dd>
<dt id="toggle_durationMs" class=""><a name="toggle_durationMs">durationMs</a></dt>
<dd class=""><span class="optional">optional</span> if set, the duration of the animation in milliseconds. By default, there is no animation and the set will be changed
immediately.</dd>
<dt id="toggle_linearity" class=""><a name="toggle_linearity">linearity</a></dt>
<dd class=""><span class="optional">optional</span> defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0. Ignored if durationMs is 0.</dd>
<dt id="toggle_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3"><a name="toggle_RETURN">return value</a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3">a function(newState) that will change from the first to the second state and vice versa if called without argument or with
newState set to null. If the argument is a boolean false or true, the first or second state will be set respectively.
If the argument is not boolean or the function is called without arguments, the function toggles between both states.</dd>
</dl>

<h4>Description</h4>
<div class="description">
Creates a function that switches between the two given states for the list. The states use set() syntax.

If no duration is given, the returned function changes the state immediately using set(). If a duration has been passed, the returned function
uses animate() to change the state. If the returned function is invoked while an animation is running, it interrupts the animation and returns
to the other state.

</div>

<div class="examples">
<h4>Example</h4>
<div class="example">Creates a toggle function that changes the background color of the page.
<pre>
var light = $('body').set({$backgroundColor: #000}, {$backgroundColor: #fff});
light();      // toggles state to second state
light(false); // sets first state (background color to #000).
light(true);  // sets second state (background color to #fff).
light();      // toggles state to first state
</pre>
</div>
<h4>Example</h4>
<div class="example">Takes the previous function, but adds it as onclick event handler that toggles the color.
<pre>
var light = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff});
$('#mySwitch').on('click', light);
</pre>
</div>
<h4>Example</h4>
<div class="example">Using an animated transition by passing a duration:
<pre>
var dimmer = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff}, 500);
$('#mySwitch').on('click', dimmer);
</pre>
</div>
<h4>Example</h4>
<div class="example">To toggle CSS classes specify both states:
<pre>
var t = $('#myElement').toggle({$: '-myClass1 -myClass2'}, {$: '+myClass1 +myClass2'});
$('#myController').on('click', t);
</pre>
</div>
<h4>Example</h4>
<div class="example">There is a shortcut for toggling CSS classes. Just list them space-separated in a string:
<pre>
var t = $('#myElement').toggle('myClass1 myClass2');
</pre>
</div>
</div>


<p><a href="index.html">back to Overview</a></p>
<div id="toc"><a href="dollar.html">MINI()</a>
<a href="add.html">.add()</a>
<a href="addafter.html">.addAfter()</a>
<a href="addbefore.html">.addBefore()</a>
<a href="addfront.html">.addFront()</a>
<a href="animate.html">.animate()</a>
<a href="append.html">.append()</a>
<a href="collect.html">.collect()</a>
<a href="each.html">.each()</a>
<a href="fill.html">.fill()</a>
<a href="filter.html">.filter()</a>
<a href="find.html">.find()</a>
<a href="get.html">.get()</a>
<a href="hasclass.html">.hasClass()</a>
<a href="length.html">.length</a>
<a href="offset.html">.offset()</a>
<a href="on.html">.on()</a>
<a href="prepend.html">.prepend()</a>
<a href="raw.html">.raw</a>
<a href="remove.html">.remove()</a>
<a href="replace.html">.replace()</a>
<a href="set.html">.set()</a>
<a href="sub.html">.sub()</a>
<a href="toggle.html">.toggle()</a>
<a href="values.html">.values()</a>
<a href="dollardollar.html">MINI.$$()</a>
<a href="el.html">MINI.el()</a>
<a href="getcookie.html">MINI.getCookie()</a>
<a href="loop.html">MINI.loop()</a>
<a href="off.html">MINI.off()</a>
<a href="parsejson.html">MINI.parseJSON()</a>
<a href="ready.html">MINI.ready()</a>
<a href="request.html">MINI.request()</a>
<a href="setcookie.html">MINI.setCookie()</a>
<a href="tojson.html">MINI.toJSON()</a>
<a href="always.html">promise.always()</a>
<a href="error.html">promise.error()</a>
<a href="then.html">promise.then()</a>
</div>	</main>
</page>
