<?xml version="1.0" encoding="UTF-8"?>
<page:page xmlns:page="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
  <page:title>Minified.js for JavaScript Developers</page:title>
  <page:section>tutorial</page:section>
  <page:main><div>
  <h1>Minified.js for JavaScript Developers</h1>

<h2>What is Minified.js?</h2>
<ul>
<li>Tiny JavaScript framework (&lt;4kb gzipped)<ul>
<li>Smaller than jQuery or MooTools by an order of magnitude in the default distribution</li>
<li>Featuring a <a href="/builder">Builder</a> to create even smaller versions containing only required functions</li></ul></li> 

<li>Complete Feature Set<ul>
<li>Close to jQuery or MooTools for most use cases</li>
<li>Exceeding jQuery or MooTools in some use cases</li>
<li>Flexible enough to make up for missing features</li></ul></li>

<li>No Magic<ul>
<li>Aims to be predictable</li>

<li>Never changes built-ins</li>
<li>No polyfills, no emulated properties</li>

<li>Simple, clean API without surprises</li></ul></li>
</ul>

<h2>How to include Minified.js into your project</h2>
<ul>
<li>Download the distribution and refer to it in a script tag:
<pre>
&lt;script src="path/to/minified.js">&lt;/script>
</pre>
This is by far the easiest way, but you can optimize it even more..</li>
<li>Use the <a href="/builder">Builder</a> to build a customized version that contains only what you need. Then embed it using the script tag as shown above.</li>
<li>Use the <a href="/builder">Builder</a> to create a customized version and cut&amp;paste it at the top of one of your JavaScript files, so Minified.js and your code are located in the same file. This will reduce the number of files on your pages and also allows better Gzip compression.</li>
</ul>

<h2>Creating a MINI list</h2>
<p>The first step to doing almost anything with Minified is to <b>create a MINI list</b>, an array-like class where most of Minified’s functions are stored.</p>

<p>You can create a MINI-list using CSS selectors in the usual syntax:
<pre>
var listItems = <a href="/reference/dollar.html">$</a>('#myList li');
</pre>
In the default configuration with IE6/IE7 compatibility, you can only use CSS1 selectors without pseudo-classes. If you disable backward-compatibility, you can use the browser’s CSS engine.
</p>

<p>There as an alternative to <a href="/reference/dollar.html"><code>$</code></a> that you can use:
<pre>
var listItems = <a href="/reference/dollar.html">MINI</a>('#myList li');
</pre>
<a href="/reference/dollar.html"><code>MINI</code></a> and <a href="/reference/dollar.html"><code>$</code></a> are synonyms. In the builder you can disable the <a href="/reference/dollar.html"><code>$</code></a> symbol to allow MINI to co-exist with jQuery and other frameworks.</p>

<p>Here some more examples of valid selectors:
<pre>
<a href="/reference/dollar.html">$</a>('#myElement');   
<a href="/reference/dollar.html">$</a>('.myClass');
<a href="/reference/dollar.html">$</a>('#divA, #divB, #divC');
<a href="/reference/dollar.html">$</a>('#top .section li');
<a href="/reference/dollar.html">$</a>('*'); // all elements
</pre>
</p>

<p>You can also either pass a DOM node or a list of DOM nodes. Nested lists will automatically be flattened. Nulls in lists will be omitted.
<pre>
var singleElement = <a href="/reference/dollar.html">$</a>(document.getElementById(‘oldFashioned’));
var threeElements = <a href="/reference/dollar.html">$</a>([e1, e2, e3]);
var fourElements = <a href="/reference/dollar.html">$</a>([[e1, e2], [e3, e4]]);
var plus1 = <a href="/reference/dollar.html">$</a>([<a href="/reference/dollar.html">$</a>('.myClass'), extraElement]);
</pre>
</p>

<p>Selectors can have a context. If a context is set, you limit the result set to those elements whose parent is one of the context nodes.The context can be specified in the same way as the selector itself, using a selector string, a DOM node or a list of nodes:
<pre>
var cells = <a href="/reference/dollar.html">$</a>(‘td, th’, ‘#myTable’); // all td and th element in #myTable
var cells1 = <a href="/reference/dollar.html">$</a>(‘td, th’, document.getElementById(‘myTable’)); // same as above

var cells2 = <a href="/reference/dollar.html">$</a>(‘td, th’, ‘.specialTable’); // all td and th element in .specialTable elements
</pre></p>

<p>You can limit the context to be used only for direct children by setting the third parameter to true:
<pre>
var listItems = <a href="/reference/dollar.html">$</a>(‘li’, ‘ol’, true); // all list items in ordered lists
</pre>
</p>

<p>Where other frameworks have a large selection of pseudo-classes and list-functions, Minified has only few, very powerful functions. You should checkout the documentation of <a href="/reference/collect.html"><code>collect</code></a>, <a href="/reference/filter.html"><code>filter</code></a> and <a href="/reference/find.html"><code>find</code></a> for more information. Here a small example to give you an idea:
<pre>
var r = <a href="/reference/dollar.html">$</a>(‘#myTable tr’)                                                            // all rows in myTable
           .<a href="/reference/filter.html">filter</a>(function(elem, index) { return index % 2 == 1; }) // filter: take only odd rows
           .<a href="/reference/collect.html">collect</a>(function(elem) { return <a href="/reference/dollar.html">$</a>(‘td’, elem).<a href="/reference/sub.html">sub</a>(-3); })   // use the last three cells per row
           .<a href="/reference/find.html">find</a>(function(elem) { if (<a href="/reference/dollar.html">$</a>(elem).<a href="/reference/hasclass.html">hasClass</a>(‘hit’)) return elem; }); // find first cell with class ‘hit’
</pre>
</p>

<p>The lists returned by the selectors behave pretty much like arrays. You can access them by index and they have a <a href="/reference/length.html"><code>length</code></a> property. Please note that you must not modify a list using the index operator (“list[i]") though. The results would be undefined.<br/>
This example iterates through a list using a <code>for</code> loop:
<pre>
var list = <a href="/reference/dollar.html">$</a>(‘input’); 
for (var i = 0; i &lt; <a href="/reference/length.html">length</a> ; i++)
    list[i].value = ‘’;
</pre>
Alternatively, you could use the Minified’s <a href="/reference/each.html"><code>each()</code></a> function:
<pre>
var list = <a href="/reference/dollar.html">$</a>(‘input’); 
list.<a href="/reference/length.html">each</a>(function(element, index) {
    element.value = ‘’;
});
</pre>
</p>

<p>A special variant of the selector function <a href="/reference/dollar.html"><code>$</code></a> is <a href="/reference/dollardollar.html"><code>$$</code></a>. It works like <a href="/reference/dollar.html"><code>$</code></a>, but only returns only the first element of the list instead of the list itself. If the list is empty, it returns the undefined value.
<pre>
var parent1 = <a href="/reference/dollardollar.html">$$</a>‘#myElement’).parentNode;
var parent2 = <a href="/reference/dollardollar.html">MINI.$$</a>(‘#myElement’).parentNode; // alternative syntax, if ‘$$’ disabled in builder
var parent3 = <a href="/reference/dollar.html">$</a>(‘#myElement’)[0].parentNode;      // same result: $$() is just short for $()[0]
</pre>
</p>

<h2>Universal get() and set()</h2>

<p>Whereas other frameworks have a number of different functions to access properties, attributes and CSS styles, Minified has only two: <a href="/reference/get.html"><code>get()</code></a> and <a href="/reference/set.html"><code>set()</code></a>. You define what data you access by using the right name. Several other functions, <a href="/reference/prepend.html"><code>prepend()</code></a>, <a href="/reference/append.html"><code>append()</code></a>, <a href="/reference/animate.html"><code>animate()</code></a> and <a href="/reference/toggle.html"><code>toggle()</code></a>, are built upon the universal <a href="/reference/set.html"><code>set()</code></a> function.
</p>

<p>The simplest data to access is a regular JavaScript property. You only specify the property name to get or set it:
<pre>
var oldGreeting = <a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/get.html">get</a>('innerHTML'); // value of list’s first element!
<a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/set.html">set</a>('innerHTML', 'Hello'); // sets innerHTML for all list elements!
</pre>
</p>
<p>For attributes, prefix the name with a ‘@’:
<pre>
var oldTitle = <a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/get.html">get</a>('@title'); // value of list’s first element!
<a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/set.html">set</a>('@title', 'Greeting'); // sets @title for all list elements!
</pre>
</p>

<p>To set or get a CSS style, prefix then with a ‘$’:
<pre>
var oldMargin = <a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/get.html">get</a>('$marginTop'); // value of list’s first element!
<a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/set.html">set</a>('$marginTop', '10px'); // sets $marginTop for all list elements!
</pre>
</p>

<p>It is possible, of course, set more than one property at once using a map:
<pre>
<a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/set.html">set</a>({innerHTML: 'Hello', 
                    '@title': 'Greeting',
                    $marginTop: '10px'});
</pre>
</p>

<p>You can also retrieve a map of values by specifying a list or map of names:
<pre>
var margins = <a href="/reference/dollar.html">$</a>('.greeting').<a href="/reference/get.html">get</a>(['$marginTop', '$marginRight', '$marginBottom', '$marginLeft']);
</pre>
</p>

<p>Minified also uses <a href="/reference/set.html"><code>set()</code></a> to modify CSS classes. If you need to overwrite the existing classes, you could always set them with the <code>className</code> property of the element. For more complex operations, <a href="/reference/set.html"><code>set()</code></a> provides you with the name <code>$</code>. But since it is the most important <a href="/reference/set.html"><code>set()</code></a> operation, you can omit it and write:
<pre>
<a href="/reference/dollar.html">$</a>('.cnt').<a href="/reference/set.html">set</a>('+highlighted -plain'); // add / remove CSS class
</pre>
The argument is a space-separated list of class names. Those prefixed with ‘+’ will be added and names prefixed with ‘-’ will be removed. A class name without prefix will be toggled:
<pre>
<a href="/reference/dollar.html">$</a>('.cnt').<a href="/reference/set.html">set</a>('selection'); // toggle CSS class
</pre>
</p>

<p>The name <code>$</code> only becomes important if you want to set CSS classes and other properties at the same time:
<pre>
<a href="/reference/dollar.html">$</a>('#msg').<a href="/reference/set.html">set</a>({innerHTML: 'none', 
               $: 'selection -special +none'}); // toggle ‘selection’, remove ‘special’, add ‘none’
</pre>
</p>

<p>Minified has two more ‘virtual’ properties called <code>$$fade</code> and <code>$$slide</code> which are mostly useful for animation (see below), but can be used by <a href="/reference/get.html"><code>get()</code></a> and <a href="/reference/set.html"><code>set()</code></a> as well. <code>$$fade</code> is a number between 0 and 1 that specified the opacity of an element, allowing you to fade elements in and out. <code>$$slide</code> is a number between 0 and 1 that represents the vertical size of an element relative to the ‘natural’ size, allowing you to slide elements in and out.

<pre>
<a href="/reference/dollar.html">$</a>('#dialog').<a href="/reference/set.html">set</a>({$$fade: 0.5,    // half-transparent
                  $$slide: 0.5}); // only upper half shown 
</pre>
</p>

<p>Instead of just setting the value with <a href="/reference/set.html"><code>set()</code></a>, you can also modify the old one. The functions <a href="/reference/append.html"><code>append()</code></a> and <a href="/reference/prepend.html"><code>prepend()</code></a> will add a string to the beginning or end of the old value. You can also pass a callback function to <a href="/reference/set.html"><code>set()</code></a> to evaluate the new value for each element:
<pre>
// Modify old value using callback function:
<a href="/reference/dollar.html">$</a>(‘#e1’).<a href="/reference/set.html">set</a>(‘innerHTML’, function(oldValue, index, obj) { return oldValue.replace(/hello/i, ‘Hi’); });

// append / prepend string
<a href="/reference/dollar.html">$</a>(‘#e2’).<a href="/reference/prepend.html">prepend</a>(‘innerHTML’, ‘&lt;h1>Headline&lt;/h1>’);
<a href="/reference/dollar.html">$</a>(‘#e2’).<a href="/reference/append.html">append</a>(‘innerHTML’, ‘&lt;hr/>&lt;h3>Footer&lt;/h3>’);
</pre>
</p>

<p>The most powerful method of the <a href="/reference/set.html"><code>set()</code></a> family is <a href="/reference/animate.html"><code>animate()</code></a>. <a href="/reference/animate.html"><code>animate()</code></a> will find out the old values using <a href="/reference/get.html"><code>get()</code></a>, and then start an animation loop to transition to the given destination values. The following example moves elements from position 0px to 80px in 750 milliseconds:
<pre>
<a href="/reference/dollar.html">$</a>('.moving').<a href="/reference/set.html">set</a>({$left: '0px'})
           .<a href="/reference/animate.html">animate</a>({$left: '80px'}, 750);
</pre>
</p>

<p>Using <code>$$fade</code> and <code>$$slide</code> you can let element appear and disappear:
<pre>
<a href="/reference/dollar.html">$</a>('.fading').<a href="/reference/animate.html">animate</a>({$$fade: 0}, 1000);
</pre>
Please see the <a href="/reference/animate.html"><code>animate()</code></a> documentation for details, as <a href="/reference/animate.html"><code>animate()</code></a> has a number of additional features.
</p>


<h2>Creating and Modifying HTML</h2>

<p>The most important functions for modifying HTML are <a href="/reference/fill.html"><code>fill()</code></a> and <a href="/reference/add.html"><code>add()</code></a>. <a href="/reference/fill.html"><code>fill()</code></a> replaces the element’s children with the given nodes, and <a href="/reference/add.html"><code>add()</code></a> just adds them as children.</p>

<p>In the simplest case, you can call <a href="/reference/fill.html"><code>fill()</code></a> without arguments to just remove all children the elements in the list:
<pre>
<a href="/reference/dollar.html">$</a>(‘.myClass’).<a href="/reference/fill.html">fill</a>();   // remove all children
</pre>
</p>

<p>
If you call <a href="/reference/fill.html"><code>fill()</code></a> or <a href="/reference/add.html"><code>add()</code></a> with a string, they will create a new text node and add it:
<pre>
<a href="/reference/dollar.html">$</a>(‘.greetings’).<a href="/reference/fill.html">fill</a>(“Hello");                  // Replace children with text “Hello"
<a href="/reference/dollar.html">$</a>(‘.greetings’).<a href="/reference/add.html">add</a>(“and Goodbye");  // add a second text node
</pre>
</p>

<p>In order to create a new element, use the function <a href="/reference/el.html"><code>EE()</code></a>. <a href="/reference/el.html"><code>EE()</code></a> creates a new element, optionally adds children to the new element using <a href="/reference/add.html"><code>add()</code></a>, and can also add attributes and everything else that is supported by <a href="/reference/set.html"><code>set()</code></a>.
<pre>
<a href="/reference/dollar.html">$</a>(‘#header’).<a href="/reference/fill.html">fill</a>(<a href="/reference/el.html">EE</a>(‘h2’, ‘My Title’));                                                            // create &lt;h2>MyTitle&lt;/h2>

<a href="/reference/dollar.html">$</a>(‘#linkContainer’).<a href="/reference/fill.html">fill</a>(<a href="/reference/el.html">EE</a>(‘a’, {‘@href’: ‘http://acme.com’}, “ACME"));  // create &lt;a href="http://acme.com">ACME&lt;/a>

<a href="/reference/dollar.html">$</a>(‘#header’).<a href="/reference/add.html">add</a>([<a href="/reference/el.html">EE</a>(‘br’), “Single line", <a href="/reference/el.html">EE</a>(‘br’)]);                                  // add &lt;br/>Single line&lt;br/>

<a href="/reference/dollar.html">$</a>(‘#list’).<a href="/reference/fill.html">fill</a>(<a href="/reference/el.html">EE</a>(‘ul’, [  // &lt;ul>
                                      <a href="/reference/el.html">EE</a>(‘li’, {$: ‘first’}, “First item"), // &lt;li class="first">First Item&lt;/li>
                                      <a href="/reference/el.html">EE</a>(‘li’, “Second item"),             // &lt;li>Second Item&lt;/li>
                                      <a href="/reference/el.html">EE</a>(‘li’, “Third item"),                 // &lt;li>Third Item&lt;/li>
                                   ])); // &lt;/ul>
</pre>
</p>

<p>Please note that <a href="/reference/el.html"><code>EE()</code></a> just creates and returns a single DOM element. A DOM element can only be added once to a DOM tree. Minified won’t clone DOM nodes, unlike jQuery. Therefore, even though <a href="/reference/fill.html"><code>fill()</code></a> and <a href="/reference/add.html"><code>add()</code></a> can add text nodes for more than one list element, if you pass a elements or lists as arguments, they will only be added to the first list element!</p>

<p>If you need to add elements to more than once list member, you need to provide a generator function to <a href="/reference/add.html"><code>add()</code></a> or <a href="/reference/fill.html"><code>fill()</code></a>. This function will be called for each list member to create a new DOM element:
<pre>
<a href="/reference/dollar.html">$</a>(‘.headers’).<a href="/reference/fill.html">fill</a>(function(elem, index) { return EE(‘h2’, ‘My Title’); });

<a href="/reference/dollar.html">$</a>(‘.linkContainers’).<a href="/reference/fill.html">fill</a>(function() { return <a href="/reference/el.html">EE</a>(‘a’, {‘@href’: ‘http://acme.com’}, “ACME"); });

<a href="/reference/dollar.html">$</a>(‘.headers’).<a href="/reference/add.html">add</a>(function(elem, index) { return [<a href="/reference/el.html">EE</a>(‘br’), “Single line", <a href="/reference/el.html">EE</a>(‘br’)]});

<a href="/reference/dollar.html">$</a>(‘.lists’).<a href="/reference/fill.html">fill</a>(function(elem, index) { return <a href="/reference/el.html">EE</a>(‘ul’, [ 
                                      <a href="/reference/el.html">EE</a>(‘li’, {$: ‘first’}, “First item"),
                                      <a href="/reference/el.html">EE</a>(‘li’, “Second item"),
                                      <a href="/reference/el.html">EE</a>(‘li’, “Third item"), 
                                   ])});
</pre>
Generator functions are not required to add a simple text node, only for elements and lists.
</p>

<p>Beside <a href="/reference/fill.html"><code>fill()</code></a> and <a href="/reference/add.html"><code>add()</code></a>, there are a few more functions for adding or removing nodes:
<pre>
<a href="/reference/dollar.html">$</a>('#d').<a href="/reference/addfront.html">addFront</a>('Read this first!');        // add as first child
<a href="/reference/dollar.html">$</a>('#e').<a href="/reference/addafter.html">addAfter</a>([<a href="/reference/el.html">EE</a>('hr'), 'My Footer']);   // add directly after #e
<a href="/reference/dollar.html">$</a>('#f').<a href="/reference/addbefore.html">addBefore</a>(<a href="/reference/el.html">EE</a>('h1', 'My Title'));    // add in front of #f
<a href="/reference/dollar.html">$</a>('#oldH2').<a href="/reference/replace.html">replace</a>(<a href="/reference/el.html">EE</a>('h2', 'New Title')); // replace #oldH2 with the new &lt;h2>
<a href="/reference/dollar.html">$</a>('#oldH3').<a href="/reference/remove.html">remove</a>();                        // remove #oldH3 without substitution
</pre>
</p>

<h2>Events</h2>

<p>
Events in Minified may a bit different than what you are used to. In the simplest case though, it all looks very familiar:
<pre>
<a href="/reference/dollar.html">$</a>(‘#submitButton’).<a href="/reference/on.html">on</a>(‘click’, function() {
	alert(‘Button pressed!’);
});
</pre>
What you don’t see here is that Minified will always <b>disable the default behaviour and prevent bubbling by default</b>, by calling the browser’s <code>preventDefault()</code> and <code>stopPropagation()</code> functions or their respective Internet Explorer equivalents. This means that if you add an event handler to a form submit button, the button will not submit the form anymore, unless you explicitly allow it. Similarly, a click handler on a link would prevent the link from changing the page.
</p>

<p>If you want to keep the browser’s default action or allow bubbling, the handler must return <code>true</code>:
<pre>
<a href="/reference/dollar.html">$</a>(‘#submitButton’).<a href="/reference/on.html">on</a>(‘click’, function() {
	alert(‘Button pressed, will submit now!’);
	return true;
});
</pre>
</p>

<p>By default, Minified will supply not one two arguments to the event handler:
<pre>
<a href="/reference/dollar.html">$</a>(‘#myDiv’).<a href="/reference/on.html">on</a>(‘click’, function(e, index) {
	console.log(‘Clicked x=’ + xe.pageX, ‘y=’ + xe.pageY, ‘button=‘+xe.right?’right’:’left’);
});
</pre>
The first argument is the unmodified event object, as provided by the browser. The second argument contains the index of the element in the list for which the event handler has been called. In the previous example, it is always 0. But consider this:
<pre>
<a href="/reference/dollar.html">$</a>(‘ol.myList li’).<a href="/reference/on.html">on</a>(‘click’, function(e, index) {
	console.log(‘Clicked on list item no’, index, ‘with content:’, this.innerHTML);
});
</pre>
The index often makes it easy to identify which element has been clicked when you set an event handler for a whole list. <code>this</code> will still be set to the event source, as you may be used to from other frameworks.
</p>

<p>Often, all you want to do when an event has been fired is to call the right function with the corresponding arguments. Minified makes this easy by allowing you to customize the arguments being passed to an event handler:
<pre>
function setZoomLevel(percentage) {
   // ...
}
<a href="/reference/dollar.html">$</a>(‘#smallButton’).<a href="/reference/on.html">on</a>(‘click’, setZoomLevel, [50]);
<a href="/reference/dollar.html">$</a>(‘#normalButton’).<a href="/reference/on.html">on</a>(‘click’, setZoomLevel, [100]);
<a href="/reference/dollar.html">$</a>(‘#largeButton’).<a href="/reference/on.html">on</a>(‘click’, setZoomLevel, [150]);
</pre>
If you pass custom arguments for an event handler, its return value will be ignored and Minified will always disable all further event processing.
</p>

<p>
Event handlers can be removed using the function <a href="/reference/off.html"><code>off()</code></a>. <a href="/reference/off.html"><code>off()</code></a> is a global function that removes the handler function from all events and all elements is has been registered for.
<pre>
<a href="/reference/off.html">$.off</a>(setZoomLevel);
</pre>
</p>

<h2>Toggles</h2>

<p>A toggle is just a function that can switch between two states. The states are defined as two <a href="/reference/set.html"><code>set()</code></a> arguments. The following example creates a toggle that changes the background color of the &lt;body> element:
<pre>
var light = <a href="/reference/dollar.html">$</a>('body').<a href="/reference/toggle.html">toggle</a>(
 {$backgroundColor: #000},   // state 1
 {$backgroundColor: #fff}    // state 2
);
</pre>
Upon creation, the toggle sets the first state. When you call the toggle function with a boolean <code>true</code> as argument, it switch to the second state and set the background color accordingly. Call it with ‘false’ and it switches to the first one. Call it without arguments (or any other argument than a boolean <code>true</code> or <code>false</code>), the toggle function will toggle between the first and second state.
<pre>
light();       // toggle background color
light(true);   // turn on the light  (state 2)
light(false);  // turn the light off (state 1)
</pre>
</p>

<p>Now, if you want to toggle the background color by clicking on a button, you only need to add the toggle function as event handler:
<pre>
<a href="/reference/dollar.html">$</a>('#switch').on('click', light);
</pre>
</p>

<p>By passing boolean arguments to the toggle function you can define a specific state for an event:
<pre>
<a href="/reference/dollar.html">$</a>('#switchOn') .on('click', light, [true]);
<a href="/reference/dollar.html">$</a>('#switchOff').on('click', light, [false]);
</pre>
</p>

<p>Toggles can also be animated. Just pass the duration as additional parameter:
<pre>
var dimmer = <a href="/reference/dollar.html">$</a>('body').toggle(
 {$backgroundColor: #000},  // light off
 {$backgroundColor: #fff},  // light on
 750                        // 750ms
);
</pre>
</p>

<p>All properties supported by <a href="/reference/set.html"><code>set()</code></a> can be toggled, including CSS classes:
<pre>
var highlighter = <a href="/reference/dollar.html">$</a>(‘.marked’).<a href="/reference/toggle.html">toggle</a>(
  {$: ‘-highlighted’},
  {$: ‘+highlighted’}
);
</pre> 
</p>

<p>You can also use the abbreviated <a href="/reference/set.html"><code>set()</code></a> syntax for CSS classes:
<pre>
var highlighter2 = <a href="/reference/dollar.html">$</a>(‘.marked’).<a href="/reference/toggle.html">toggle</a>(‘-highlighted’, ‘+highlighted’);
</pre> 
But because toggling CSS classes is so common, there is an even shorter syntax to create a toggle that’s identical to the previous toggle:
<pre>
var highlighter3 = <a href="/reference/dollar.html">$</a>(‘.marked’).<a href="/reference/toggle.html">toggle</a>(‘highlighted’);  // toggle CSS class ‘highlighted’
</pre> 
You can also use more than one space-separated CSS classes in the string, as you would when toggling CSS classes with <a href="/reference/set.html"><code>set()</code></a>.
</p>

<h2>Wire</h2>

<p>Toggles can make event handling a bit easier, but wires allow you to go further. A wire connects one or more events with one or more toggles, all created in a single function call.
</p>

<p>The most simple wires are those where the element firing the event is also the event being modified. The following example creates a wire for all elements with the class ‘expandable’ that toggles the class ‘expanded’ on click:
<pre>
$(‘.expandable’).<a href="/reference/wire.html">wire</a>(‘click’, ‘expanded’); // toggle class ‘expanded’ on click
</pre>
</p>

<p>Events are not limited to toggling, but also be used to set a specific state. You can specify all event types that trigger the wire in the first argument as a space-separated list. Only unprefixed events will toggle. If prefixed with ‘-’, the first toggle state will be set, and with the prefix ‘+’ the second state set. The following example sets the CSS class “highlighted" for all elements with the class “marked" while the mouse pointer is touching it:
<pre>
<a href="/reference/dollar.html">$</a>(‘.marked’).<a href="/reference/wire.html">wire</a>(‘+mouseover -mouseout’, ‘highlighted’); // highlight on mouse over
</pre>
</p>

<p>Wire()’s second argument can also take an array that will be passed to <a href="/reference/toggle.html"><code>toggle()</code></a> in order to create a new toggle. Let’s modify the first example to let the expandable elements slide in and out:
<pre>
<a href="/reference/dollar.html">$</a>(‘.expandable’).<a href="/reference/wire.html">wire</a>(‘click’, [{$$slide: 0}, {$$slide: 1}, 500]); // smoothly slide-in/out in 500 ms on click
</pre>
</p>

<p>If you have more than one expandable section, you may want to have buttons that expand or collapse all sections. You can declare them in the first argument as a map:



<pre>
<a href="/reference/dollar.html">$</a>(‘.expandable’).<a href="/reference/wire.html">wire</a>(
   {
     ‘’:‘click’,                         // ‘’ refers to the list element,toggles
     ‘#collapseAll’:’-click’,    // #collapseAll sets first state
     ‘#expandAll’:’+click’      // #expandAll sets second state
   }, 
   [{$$slide: 0}, {$$slide: 1}, 500]); 
</pre>
The map key is a selected to be executed in the context of the list element. The empty string (‘’) represents the list element itself. Keys starting with ‘#’ are recognized as global and this will not use a context.
</p>

<p>
wire()’s second argument can also be a map, allowing you to set toggles for the objects inside the list element as well as for global objects.
<pre>
<a href="/reference/dollar.html">$</a>(‘.expandable’).<a href="/reference/wire.html">wire</a>({‘’:‘click’, ‘#collapseAll’:’-click’, ‘#expandAll’:’+click’}, 
   { 
     ‘’:        [{$$slide: 0}, {$$slide: 1}, 500], // slide the whole element in/out
     ‘.text’: [{$$fade: 0}, {$$fade: 1}, 500]   // at the same time, fade element’s text in/out
   }); 
</pre>
</p>

<p>For even more complex toggles, you can pass a toggle function or a list of toggle functions as second argument for the wire. Also, note that it is easy to write a custom toggle, for example for more complex animations. A toggle is nothing but a function taking an optional boolean argument, and very easy to implement.</p>


<h2>HTTP Requests</h2>


<p>Minified provides you with a friendly <code>XmlHTTPRequest</code> wrapper that includes Internet Explorer backward compatibility. The function <a href="/reference/request.html"><code>MINI.request()</code></a> can be used for GET, POST and all other asynchronous HTTP requests:
<pre>
<a href="/reference/request.html">$.request</a>('get', 'http://example.org/weatherService', {zip: 90210}, 
    function success(txt) {
        alert(“Got from service: “ + txt);
    },
    function error(status, statusText, responseText) {
        alert(“Error accessing service.");
    });
</pre>
The third argument is a map containing parameters that, when set, will be automatically added as URL parameters. The fourth argument is the callback that will be invoked on success, and the fifth argument’s callback will be invoked on failure.</p>

<p>POST requests are very similar and use the same syntax. However, the map in the third argument will now be used in the POST’s instead of the URL:
<pre>
<a href="/reference/request.html">$.request</a>('post', 'http://example.org/weatherService', {zip: 90210}, 
    function success(txt) {
        alert(“Got from service: “ + txt);
    },
    function error(status, statusText, responseText) {
        alert(“Error accessing service.");
    });
</pre>
</p>

<p>POST also allows you to specify an XML document or a string as data. The latter option can be used for transmitting JSON objects. The next example transmits the data in JSON form to the imaginary service and then treats the result also as JSON object:
<pre>
<a href="/reference/request.html">$.request</a>('post', 'http://example.org/weatherService', 
    <a href="/reference/tojson.html">$.toJSON</a>({zip: 90210}), 
    function success(txt) {
        var data = <a href="/reference/parsejson.html">$.parseJSON</a>(txt);
        alert(“Today’s temperature: “ + data.today.temperature);
    },
    function error(status, statusText, responseText) {
        alert(“Error accessing service.");
    });
</pre>
</p>

<p>When users enter their data into forms, you can use Minified’s <a href="/reference/values.html"><code>values()</code></a> function to easily obtain the data. It will take data from input fields as well as complete forms and puts it into a map that can be either used as data argument for <a href="/reference/request.html"><code>request()</code></a> or be converted into a JSON string:
<pre>
var data = <a href="/reference/dollar.html">$</a>(‘#myForm, input.extra’).<a href="/reference/values.html">values</a>();
<a href="/reference/request.html">$.request</a>('post', '/myService', data, successFunc, errorFunc);
</pre>
</p>


<h2>A few more things..</h2>
<p>While I showed you all the big topics in the previous chapters, here are some random functions that may be interesting for you.</p>

<p>Just like jQuery and other frameworks, Minified allows you to register a callback to be called when the document is ready (aka DOMReady). This works exactly like you are used to from jQuery:
<pre>
<a href="/reference/dollar.html">$</a>(function() {
  // Let’s do some work
});
</pre>
</p>

<p>When doing JavaScript animation you should avoid using a simple timeout, as this will cause unneccessary CPU load when the browser is not displaying your page and you won’t be able to have the perfect frame rate. Modern browsers support ‘requestAnimationFrame’ which allows you to provide a callback to perform animation at browser-controlled preferred pace. This will make your animation smoother and lower the CPU load. Minified’s <a href="/reference/loop.html"><code>loop()</code></a> function wraps this function while also providing backward compatibility for older browsers.</p>

<p>The following example will move a div in a circular movement:
<pre>
var myDiv = <a href="/reference/dollardollar.html">$$</a>('#myAnimatedDiv');
var d = 2500;              // one rotation every 2.5s
var r = 100;               // radius 100 px
<a href="/reference/loop.html">$.loop</a>(function(t, stopFunc) {
    var a = 2 * Math.PI * t / d;               
    myDiv.style.left = (r * Math.cos(a) + ' px';
    myDiv.style.top = (r * Math.sin(a) + ' px';
});
</pre>
</p>

<p>Minified also provides you two helper functions to read and write cookies in the browser:
<pre>
var visits = <a href="/reference/getcookie.html">$.getCookie</a>('numberOfVisits');
<a href="/reference/setcookie.html">$.setCookie</a>('numberOfVisits',
            visits ? (parseInt(visits) + 1) : 1,    // if cookie not set, start with 1
            365);                                   // store for 365 days
</pre>
</p>

  
  </div>
 </page:main>

  
</page:page>